function wait_and_kick( empty ) -> empty {
    var spin -> int16;
    var busy -> int16;
    var stage -> int16;
    let busy = 0;
    let _ = say(63,1);
    while( busy<100 ) {
        let busy = busy+1;
    }
    let stage = 1;
    let spin = 65;
    while( stage < 7 ) {
        let spin = spin+1;
        let _ = say(stage+48,1);
        while(1) {}
        let _ = say(spin,2);
        var res -> int16;
        let res = enact_cmd( stage, 0 );
        if( res == 257 ) {
            let stage = stage+1;
        } else {
            if( stage==5 ) {
                let stage=4;
            } else {
                let _ = say(78,1);
                while(1) {}
            }
        }
    }

    let _ = enact_cmd( 32, 0 );
    let _ = enact_cmd( 33, 0 );

    let _ = enact_cmd(7);
    var res2 -> int16;
    let res2 = get_sd_status(empty);
    while( res2 != 257 ) {}

    let _ = say(89,1);
    while( 1 ) {}
    return empty;
}

function enact_cmd( cmd -> int16, cmddata -> int16 ) -> empty {
    var cmdres -> int16;
    let _ = set_cmd(0);
    while( get_sd_status(empty) != 0 ) {}
    let _ = set_cmddata(cmddata);
    let _ = set_cmd(cmd);
    let cmdres = get_sd_status(cmd);
    while( cmdres == 0 ) {
        let cmdres = get_sd_status(empty);
    }
    return cmdres;
}

_asm("set_cmd:");
_asm("  const hi(0x0101), r0");
_asm("  const lo(0x0101), r0");
_asm("  ld sp[0], r1");
_asm("  out r1, r0");
_asm("  ret 0");

_asm("set_cmddata:");
_asm("  const hi(0x0102), r0");
_asm("  const lo(0x0102), r0");
_asm("  ld sp[0], r1");
_asm("  out r1, r0");
_asm("  ret 0");

_asm("get_sd_status:");
_asm("  const hi(0x0100), r1");
_asm("  const lo(0x0100), r1");
_asm("  in r1, r9");
_asm("  mov r9, r0");
_asm("  ret 0");

_asm("say:");
_asm("  const hi(0x0000), r0");
_asm("  const lo(0x0000), r0");
_asm("  const hi(0x1400), r1");
_asm("  const lo(0x1400), r1");
_asm("  ld sp[0], r2");
_asm("  add r2, r1");
_asm("  out r1,r0");
_asm("  const hi(0x0001), r0");
_asm("  const lo(0x0001), r0");
_asm("  ld  sp[1], r1");
_asm("  out r1, r0");
_asm("  ret 0");

